// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
	"user" (NAME, avatar_url, username, plan, email)
VALUES
	($1, $2, $3, $4, $5)
RETURNING
	id, name, avatar_url, username, plan, email, created_at, is_deleted
`

type CreateUserParams struct {
	Name      string `json:"name"`
	AvatarUrl string `json:"avatar_url"`
	Username  string `json:"username"`
	Plan      Plan   `json:"plan"`
	Email     string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.AvatarUrl,
		arg.Username,
		arg.Plan,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.Username,
		&i.Plan,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE
	id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
	id, name, avatar_url, username, plan, email, created_at, is_deleted
FROM
	"user"
WHERE
	id = $1
LIMIT
	1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.Username,
		&i.Plan,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT
	id, name, avatar_url, username, plan, email, created_at, is_deleted
FROM
	"user"
WHERE
	email = $1
LIMIT
	1
`

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.Username,
		&i.Plan,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getUserFromUsername = `-- name: GetUserFromUsername :one
SELECT
	id, name, avatar_url, username, plan, email, created_at, is_deleted
FROM
	"user"
WHERE
	username = $1
LIMIT
	1
`

func (q *Queries) GetUserFromUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AvatarUrl,
		&i.Username,
		&i.Plan,
		&i.Email,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
	id, name, avatar_url, username, plan, email, created_at, is_deleted
FROM
	"user"
LIMIT
	$1
OFFSET
	$2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AvatarUrl,
			&i.Username,
			&i.Plan,
			&i.Email,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
