// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: request.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewRequest = `-- name: CreateNewRequest :one
insert into
  request (
    user_id,
    endpoint_id,
    path,
    response_id,
    content,
    method,
    source_ip,
    content_size,
    response_code,
    headers,
    query_params
  )
values
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) returning id, user_id, endpoint_id, path, response_id, content, method, source_ip, content_size, response_code, headers, query_params, created_at, is_deleted
`

type CreateNewRequestParams struct {
	UserID       pgtype.Int8 `json:"user_id"`
	EndpointID   int64       `json:"endpoint_id"`
	Path         string      `json:"path"`
	ResponseID   pgtype.Int8 `json:"response_id"`
	Content      pgtype.Text `json:"content"`
	Method       HttpMethod  `json:"method"`
	SourceIp     string      `json:"source_ip"`
	ContentSize  int32       `json:"content_size"`
	ResponseCode pgtype.Int4 `json:"response_code"`
	Headers      []byte      `json:"headers"`
	QueryParams  []byte      `json:"query_params"`
}

func (q *Queries) CreateNewRequest(ctx context.Context, arg CreateNewRequestParams) (Request, error) {
	row := q.db.QueryRow(ctx, createNewRequest,
		arg.UserID,
		arg.EndpointID,
		arg.Path,
		arg.ResponseID,
		arg.Content,
		arg.Method,
		arg.SourceIp,
		arg.ContentSize,
		arg.ResponseCode,
		arg.Headers,
		arg.QueryParams,
	)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EndpointID,
		&i.Path,
		&i.ResponseID,
		&i.Content,
		&i.Method,
		&i.SourceIp,
		&i.ContentSize,
		&i.ResponseCode,
		&i.Headers,
		&i.QueryParams,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getRequestById = `-- name: GetRequestById :one
select id, user_id, endpoint_id, path, response_id, content, method, source_ip, content_size, response_code, headers, query_params, created_at, is_deleted from request where id = $1 limit 1
`

func (q *Queries) GetRequestById(ctx context.Context, id int64) (Request, error) {
	row := q.db.QueryRow(ctx, getRequestById, id)
	var i Request
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EndpointID,
		&i.Path,
		&i.ResponseID,
		&i.Content,
		&i.Method,
		&i.SourceIp,
		&i.ContentSize,
		&i.ResponseCode,
		&i.Headers,
		&i.QueryParams,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getUserRequests = `-- name: GetUserRequests :many
select id, user_id, endpoint_id, path, response_id, content, method, source_ip, content_size, response_code, headers, query_params, created_at, is_deleted from request where user_id = $1 limit $2 offset $3
`

type GetUserRequestsParams struct {
	UserID pgtype.Int8 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) GetUserRequests(ctx context.Context, arg GetUserRequestsParams) ([]Request, error) {
	rows, err := q.db.Query(ctx, getUserRequests, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Request{}
	for rows.Next() {
		var i Request
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EndpointID,
			&i.Path,
			&i.ResponseID,
			&i.Content,
			&i.Method,
			&i.SourceIp,
			&i.ContentSize,
			&i.ResponseCode,
			&i.Headers,
			&i.QueryParams,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
